// server/routes/productRoutes.js
const express = require('express');
const router = express.Router();

// Shared MongoDB collection
let productsCollection;

// Function to inject shared MongoDB collection
exports.injectDB = (collection) => {
  productsCollection = collection;
};

// GET all products
router.get('/', async (req, res) => {
  try {
    const products = await productsCollection.find({}).toArray();
    res.json(products);
  } catch (error) {
    console.error('Error fetching products:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// GET product by ID
router.get('/:id', async (req, res) => {
  const productId = req.params.id;

  try {
    const product = await productsCollection.findOne({ _id: new ObjectId(productId) });

    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json(product);
  } catch (error) {
    console.error(`Error fetching product with ID ${productId}:`, error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// POST create new product
router.post('/', async (req, res) => {
  const newProduct = req.body;

  // Basic validation
  if (!newProduct.name || !newProduct.price) {
    return res.status(400).json({ message: 'Missing required fields: name, price' });
  }

  try {
    const result = await productsCollection.insertOne(newProduct);
    res.status(201).json({
      message: 'Product created successfully',
      product: { ...newProduct, id: result.insertedId },
    });
  } catch (error) {
    console.error('Error creating product:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// PUT update product by ID
router.put('/:id', async (req, res) => {
  const productId = req.params.id;
  const updatedData = req.body;

  // Prevent updating the ID
  delete updatedData._id;

  try {
    const result = await productsCollection.updateOne(
      { _id: new ObjectId(productId) },
      { $set: updatedData }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json({ message: 'Product updated successfully', updatedData });
  } catch (error) {
    console.error(`Error updating product with ID ${productId}:`, error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// DELETE product by ID
router.delete('/:id', async (req, res) => {
  const productId = req.params.id;

  try {
    const result = await productsCollection.deleteOne({ _id: new ObjectId(productId) });

    if (result.deletedCount === 0) {
      return res.status(404).json({ message: 'Product not found' });
    }

    res.json({ message: 'Product deleted successfully' });
  } catch (error) {
    console.error(`Error deleting product with ID ${productId}:`, error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

module.exports = router;
