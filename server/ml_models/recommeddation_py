import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.neighbors import NearestNeighbors
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# Example user data
user_data = {
    'revenue': 500000,
    'debt': 100000,
    'credit_score': 700,
    'industry': 'Healthcare',
    'preference': 'Loan',
    'location': 'New York'
}

# Example dataset of products/resources
data = pd.DataFrame({
    'product_type': ['Loan', 'Grant', 'Consulting', 'Loan', 'Grant'],
    'target_industry': ['Healthcare', 'Technology', 'Healthcare', 'Retail', 'Education'],
    'min_credit_score': [600, None, 650, 500, None],
    'location': ['New York', 'California', 'New York', 'Texas', 'Florida'],
    'min_revenue': [0, 200000, 100000, 50000, 150000],
    'interest_rate': [5.0, None, None, 3.5, None]
})

# Fill missing values
data['min_credit_score'] = data['min_credit_score'].fillna(0)
data['interest_rate'] = data['interest_rate'].fillna(0)

# Define feature columns
categorical_features = ['product_type', 'target_industry', 'location']
numerical_features = ['min_credit_score', 'min_revenue', 'interest_rate']

# Preprocessor pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
    ])

# KNN pipeline
knn_pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('knn', NearestNeighbors(n_neighbors=2, metric='cosine'))
])

# Fit the model
knn_pipeline.fit(data)

# Create user DataFrame matching the training structure
user_df = pd.DataFrame([{
    'product_type': user_data['preference'],
    'target_industry': user_data['industry'],
    'min_credit_score': user_data['credit_score'],
    'location': user_data['location'],
    'min_revenue': user_data['revenue'],
    'interest_rate': 0  # Placeholder; not used if preference-based filtering is done later
}])

# Transform user input using same preprocessing
user_vector = knn_pipeline.named_steps['preprocessor'].transform(user_df)

# Get nearest neighbors
knn = knn_pipeline.named_steps['knn']
distances, indices = knn.kneighbors(user_vector)

# Retrieve recommendations
recommended_products = data.iloc[indices[0]]

# Rank by interest rate (for Loan type), or other criteria
ranked_recommendations = recommended_products.sort_values(by='interest_rate', ascending=True)

print("Recommended Products:")
print(ranked_recommendations[['product_type', 'target_industry', 'location', 'min_revenue', 'interest_rate']])